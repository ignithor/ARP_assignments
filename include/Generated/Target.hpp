// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Target.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TARGET_HPP
#define FAST_DDS_GENERATED__TARGET_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TARGET_SOURCE)
#define TARGET_DllAPI __declspec( dllexport )
#else
#define TARGET_DllAPI __declspec( dllimport )
#endif // TARGET_SOURCE
#else
#define TARGET_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TARGET_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Target defined by the user in the IDL file.
 * @ingroup Target
 */
class Target
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Target()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Target()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(
            const Target& x)
    {
                    m_target_x = x.m_target_x;

                    m_target_y = x.m_target_y;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target(
            Target&& x) noexcept
    {
        m_target_x = std::move(x.m_target_x);
        m_target_y = std::move(x.m_target_y);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target& operator =(
            const Target& x)
    {

                    m_target_x = x.m_target_x;

                    m_target_y = x.m_target_y;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Target that will be copied.
     */
    eProsima_user_DllExport Target& operator =(
            Target&& x) noexcept
    {

        m_target_x = std::move(x.m_target_x);
        m_target_y = std::move(x.m_target_y);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Target object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Target& x) const
    {
        return (m_target_x == x.m_target_x &&
           m_target_y == x.m_target_y);
    }

    /*!
     * @brief Comparison operator.
     * @param x Target object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Target& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member target_x
     * @param _target_x New value to be copied in member target_x
     */
    eProsima_user_DllExport void target_x(
            const std::array<double, 9>& _target_x)
    {
        m_target_x = _target_x;
    }

    /*!
     * @brief This function moves the value in member target_x
     * @param _target_x New value to be moved in member target_x
     */
    eProsima_user_DllExport void target_x(
            std::array<double, 9>&& _target_x)
    {
        m_target_x = std::move(_target_x);
    }

    /*!
     * @brief This function returns a constant reference to member target_x
     * @return Constant reference to member target_x
     */
    eProsima_user_DllExport const std::array<double, 9>& target_x() const
    {
        return m_target_x;
    }

    /*!
     * @brief This function returns a reference to member target_x
     * @return Reference to member target_x
     */
    eProsima_user_DllExport std::array<double, 9>& target_x()
    {
        return m_target_x;
    }


    /*!
     * @brief This function copies the value in member target_y
     * @param _target_y New value to be copied in member target_y
     */
    eProsima_user_DllExport void target_y(
            const std::array<double, 9>& _target_y)
    {
        m_target_y = _target_y;
    }

    /*!
     * @brief This function moves the value in member target_y
     * @param _target_y New value to be moved in member target_y
     */
    eProsima_user_DllExport void target_y(
            std::array<double, 9>&& _target_y)
    {
        m_target_y = std::move(_target_y);
    }

    /*!
     * @brief This function returns a constant reference to member target_y
     * @return Constant reference to member target_y
     */
    eProsima_user_DllExport const std::array<double, 9>& target_y() const
    {
        return m_target_y;
    }

    /*!
     * @brief This function returns a reference to member target_y
     * @return Reference to member target_y
     */
    eProsima_user_DllExport std::array<double, 9>& target_y()
    {
        return m_target_y;
    }



private:

    std::array<double, 9> m_target_x{0.0};
    std::array<double, 9> m_target_y{0.0};

};

#endif // _FAST_DDS_GENERATED_TARGET_HPP_


